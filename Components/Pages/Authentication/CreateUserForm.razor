@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm Model="createUser" OnValidSubmit="HandleCreateUser">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="firstname" class="form-label">First Name:</label>
        <InputText id="firstname" @bind-Value="createUser.FirstName" class="form-control" />
        <ValidationMessage For="() => createUser.FirstName" />
    </div>

    <div class="mb-3">
        <label for="surname" class="form-label">Surname:</label>
        <InputText id="surname" @bind-Value="createUser.Surname" class="form-control" />
        <ValidationMessage For="() => createUser.Surname" />
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email:</label>
        <InputText id="email" @bind-Value="createUser.Email" class="form-control" />
        <ValidationMessage For="() => createUser.Email" />
    </div>

    @if (!string.IsNullOrWhiteSpace(createUser.Password))
    {
        <ul class="list-unstyled mb-3">
            <li class="@GetCriteriaClass(HasMinLength)">✔️ At least 8 characters</li>
            <li class="@GetCriteriaClass(HasUppercase)">✔️ At least one uppercase letter</li>
            <li class="@GetCriteriaClass(HasLowercase)">✔️ At least one lowercase letter</li>
            <li class="@GetCriteriaClass(HasDigit)">✔️ At least one digit</li>
            <li class="@GetCriteriaClass(HasSpecialChar)">✔️ At least one special character</li>
        </ul>
    }

    <div class="mb-3">
        <label for="password" class="form-label">Password:</label>
        <InputText id="password" @bind-Value="createUser.Password" type="password" class="form-control" />
        <ValidationMessage For="() => createUser.Password" />
    </div>

    <div class="mb-3">
        <label for="companyid" class="form-label">Company:</label>
        <InputSelect id="companyid" @bind-Value="createUser.CompanyId" class="form-control">
            <option value="0">-- Select Company --</option>
            @foreach (var company in Companies)
            {
                <option value="@company.Id">@company.Name</option>
            }
        </InputSelect>
        <ValidationMessage For="() => createUser.CompanyId" />
    </div>

    <button type="submit" class="btn btn-primary">@SubmitText</button>
</EditForm>

@code {
    private RegisterUser createUser = new();
    private List<Company> Companies = new();
    private string? ErrorMessage;

    [Parameter] public string SubmitText { get; set; } = "Register";
    [Parameter] public EventCallback<AppUser> OnUserCreated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Companies = await context.Companies.ToListAsync();
    }

    private async Task HandleCreateUser()
    {
        ErrorMessage = null;

        if (createUser.CompanyId == 0)
        {
            ErrorMessage = "Please select a valid company.";
            return;
        }

        using var context = DbFactory.CreateDbContext();
        var existing = await context.Users.FirstOrDefaultAsync(u => u.Email == createUser.Email);
        if (existing != null)
        {
            ErrorMessage = "Email is already registered.";
            return;
        }

        var hashedPassword = HashPassword(createUser.Password);

        var user = new AppUser
            {
                FirstName = createUser.FirstName,
                Surname = createUser.Surname,
                Email = createUser.Email,
                PasswordHash = hashedPassword,
                CompanyId = createUser.CompanyId
            };

        context.Users.Add(user);
        await context.SaveChangesAsync();

        await OnUserCreated.InvokeAsync(user);
    }

    private string HashPassword(string password)
    {
        using var sha = System.Security.Cryptography.SHA256.Create();
        var bytes = System.Text.Encoding.UTF8.GetBytes(password);
        var hash = sha.ComputeHash(bytes);
        return Convert.ToBase64String(hash);
    }

    private bool HasMinLength => createUser.Password.Length >= 8;
    private bool HasUppercase => createUser.Password.Any(char.IsUpper);
    private bool HasLowercase => createUser.Password.Any(char.IsLower);
    private bool HasDigit => createUser.Password.Any(char.IsDigit);
    private bool HasSpecialChar => createUser.Password.Any(c => !char.IsLetterOrDigit(c));

    private string GetCriteriaClass(bool condition)
    {
        return condition ? "text-success" : "text-danger";
    }
}
